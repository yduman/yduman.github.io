<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JS on Yadullah Duman</title><link>http://www.yduman.dev/tags/js/</link><description>Recent content in JS on Yadullah Duman</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 09 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yduman.dev/tags/js/index.xml" rel="self" type="application/rss+xml"/><item><title>How to turn off logging in NestJS tests</title><link>http://www.yduman.dev/posts/nestjs-testing-disable-logging/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>http://www.yduman.dev/posts/nestjs-testing-disable-logging/</guid><description>&lt;p>This post will be very short. I want to share one approach on how to deal with the Logger class when running NestJS unit tests. In one of our projects, we had a small issue, that when running tests, the logger would start logging when certain branches of the code were reached. Obviously, these branches should log when running on production, but for tests, we didn&amp;rsquo;t care much.&lt;/p>
&lt;h2 id="example-scenario">
 Example Scenario
 &lt;a class="heading-link" href="#example-scenario">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>Imagine this very simplified scenario. You want to test all branches of &lt;code>getAllUsers&lt;/code>. The error case test would always execute the error log.&lt;/p></description></item><item><title>Preact: Alternative to React</title><link>http://www.yduman.dev/posts/preact/</link><pubDate>Thu, 07 Mar 2019 00:00:00 +0000</pubDate><guid>http://www.yduman.dev/posts/preact/</guid><description>&lt;p>The &lt;a href="https://www.maibornwolff.de/know-how/preact-alternative-zu-react/" class="external-link" target="_blank" rel="noopener">original post&lt;/a> is written in German on the MaibornWolff website.&lt;/p>
&lt;p>The following is a plain translation of it.&lt;/p>
&lt;hr>
&lt;p>In this blog post, I want to introduce you to &lt;a href="https://preactjs.com/" class="external-link" target="_blank" rel="noopener">Preact&lt;/a>. About a year ago, I had the opportunity to test it during a spike. As a React fan, it was exciting to try out a good alternative, and I was impressed by its performance. Recently, the new version 10, &amp;ldquo;Preact X,&amp;rdquo; was released, bringing additional new features.&lt;/p></description></item><item><title>How to use the Context API in React with Hooks</title><link>http://www.yduman.dev/posts/react-context/</link><pubDate>Fri, 15 Feb 2019 00:00:00 +0000</pubDate><guid>http://www.yduman.dev/posts/react-context/</guid><description>&lt;p>In one of my last posts, I shared the announcement of Hooks by the React team with you. About two weeks ago, the React team finally released the Hooks API with version 16.8. In this blogpost I want to share one approach of how to use the &lt;code>useContext&lt;/code> Hook along with &lt;code>useReducer&lt;/code> in order to create and update context. I will not explain how the Context or Hooks API work. If you are not familiar with them, then please read the &lt;a href="https://reactjs.org/docs/getting-started.html" class="external-link" target="_blank" rel="noopener">documentation&lt;/a>. Furthermore, this post is also just a reference for me, since I was exploring this Hook lately and was fascinated of its ease.&lt;/p></description></item><item><title>Get Hooked with React Hooks</title><link>http://www.yduman.dev/posts/react-hooks/</link><pubDate>Fri, 26 Oct 2018 00:00:00 +0000</pubDate><guid>http://www.yduman.dev/posts/react-hooks/</guid><description>&lt;p>So yesterday &lt;a href="https://conf.reactjs.org/" class="external-link" target="_blank" rel="noopener">ReactConf&lt;/a> started with the opening keynote of Sophie Alpert and Dan Abramov about “React Today and Tomorrow”. Dan Abramov introduced &lt;a href="https://reactjs.org/docs/hooks-intro.html" class="external-link" target="_blank" rel="noopener">Hooks&lt;/a>, which is currently in React v16.7.0-alpha and in a RFC status. I was really hooked (pun intended) about the new possibilites with the new API and many library developers immediately started to try it out and they were amazed too.&lt;/p>
&lt;h2 id="why-hooks">
 &lt;strong>Why Hooks?&lt;/strong>
 &lt;a class="heading-link" href="#why-hooks">
 &lt;i class="fa-solid fa-link" aria-hidden="true" title="Link to heading">&lt;/i>
 &lt;span class="sr-only">Link to heading&lt;/span>
 &lt;/a>
&lt;/h2>
&lt;p>The React team observed over time, that it is hard to reuse stateful logic between components. Many developers used patterns like render props and higher-order components to solve this, but most of the time you ended up in a “wrapper hell”. The Hooks API will allow developers to reuse stateful logic without changing the component hierarchy.&lt;/p></description></item></channel></rss>