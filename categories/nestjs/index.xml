<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>NestJS on Yadullah Duman</title><link>http://www.yduman.dev/categories/nestjs/</link><description>Recent content in NestJS on Yadullah Duman</description><generator>Hugo</generator><language>en</language><lastBuildDate>Mon, 09 Sep 2024 00:00:00 +0000</lastBuildDate><atom:link href="http://www.yduman.dev/categories/nestjs/index.xml" rel="self" type="application/rss+xml"/><item><title>How to turn off logging in NestJS tests</title><link>http://www.yduman.dev/posts/nestjs-testing-disable-logging/</link><pubDate>Mon, 09 Sep 2024 00:00:00 +0000</pubDate><guid>http://www.yduman.dev/posts/nestjs-testing-disable-logging/</guid><description>&lt;p>This post will be very short. I want to share one approach on how to deal with the Logger class when running NestJS unit tests. In one of our projects, we had a small issue, that when running tests, the logger would start logging when certain branches of the code were reached. Obviously, these branches should log when running on production, but for tests, we didn&amp;rsquo;t care much.&lt;/p>
&lt;h2 id="example-scenario">Example Scenario&lt;/h2>
&lt;p>Imagine this very simplified scenario. You want to test all branches of &lt;code>getAllUsers&lt;/code>. The error case test would always execute the error log.&lt;/p></description></item></channel></rss>